{
  "message": "unused argument (.)",
  "traceback": ["function_list[[i]](value)", "freduce(value, `_function_list`)", "`_fseq`(`_lhs`)", "eval(quote(`_fseq`(`_lhs`)), env, env)", "eval(quote(`_fseq`(`_lhs`)), env, env)", "withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))", "keras_model_sequential() %>% layer_dense(400, activation = \"relu\", \n    input_shape = maxlen) %>% layer_dropout(0.2) %>% regularizer_l1_l2(l1 = 0, \n    l2 = 0.01) %>% layer_dense(400, activation = \"relu\", input_shape = maxlen) %>% \n    layer_dropout(0.2) %>% regularizer_l1_l2(l1 = 0, l2 = 0.01) %>% \n    layer_dense(400, activation = \"relu\", input_shape = maxlen) %>% \n    layer_dropout(0.2) %>% regularizer_l1_l2(l1 = 0, l2 = 0.01) %>% \n    layer_dense(400, activation = \"relu\", input_shape = maxlen) %>% \n    layer_dropout(0.2) %>% regularizer_l1_l2(l1 = 0, l2 = 0.01) %>% \n    layer_dense(5, activation = \"softmax\")", "eval(ei, envir)", "eval(ei, envir)", "withVisible(eval(ei, envir))", "source(file = file, local = envir, echo = echo, encoding = encoding)", "withCallingHandlers({\n    source(file = file, local = envir, echo = echo, encoding = encoding)\n    write_run_property(\"completed\", TRUE)\n}, error = function(e) {\n    write_run_metadata(\"error\", list(message = e$message, traceback = capture_stacktrace(sys.calls())))\n    stop(e)\n})", "force(expr)", "tryCatch({\n    tfruns::training_run(file = deploy$entrypoint, context = deploy$context, \n        config = \"cloudml\", flags = deploy$overlay, encoding = \"UTF-8\", \n        echo = TRUE, view = FALSE, run_dir = run_dir)\n}, error = function(e) {\n    training_error <<- e\n})"]
}
